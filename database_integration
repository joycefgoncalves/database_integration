import mysql.connector

# Establish connection
connection = mysql.connector.connect(
    host="127.0.0.1",
    user="root",
    password="72746157",
    database="database_integration"
)

class Book:
    def __init__(self, title, author, isbn, genre, publication_date):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.genre = genre
        self.publication_date = publication_date
        self.available = True

    def __str__(self):
        return f"{self.title} by {self.author}"

    def borrow_book(self):
        if self.available:
            self.available = False
            print("Book borrowed successfully.")
        else:
            print("Sorry, the book is not available.")

    def return_book(self):
        if not self.available:
            self.available = True
            print("Book returned successfully.")
        else:
            print("The book is already available.")

class User:
    def __init__(self, name, library_id):
        self.name = name
        self.library_id = library_id
        self.borrowed_books = []

    def __str__(self):
        return self.name

    def borrow_book(self, book):
        if book.available:
            self.borrowed_books.append(book)
            book.borrow_book()
        else:
            print("Sorry, the book is not available.")

    def return_book(self, book):
        if book in self.borrowed_books:
            self.borrowed_books.remove(book)
            book.return_book()
        else:
            print("You haven't borrowed this book.")

class Author:
    def __init__(self, name, biography):
        self.name = name
        self.biography = biography

    def __str__(self):
        return self.name

class Genre:
    def __init__(self, name, description, category):
        self.name = name
        self.description = description
        self.category = category

    def __str__(self):
        return self.name

class Menu:
    def __init__(self):
        self.books = []
        self.users = []
        self.authors = []
        self.genres = []

    def display_main_menu(self):
        print("\nWelcome to the Library Management System with Database Integration!")
        print("****")
        print("Main Menu:")
        print("1. Book Operations")
        print("2. User Operations")
        print("3. Author Operations")
        print("4. Genre Operations")
        print("5. Quit")

    def run(self):
        while True:
            self.display_main_menu()
            choice = input("Enter your choice: ")
            if choice == "1":
                self.book_operations_menu()
            elif choice == "2":
                self.user_operations_menu()
            elif choice == "3":
                self.author_operations_menu()
            elif choice == "4":
                self.genre_operations_menu()
            elif choice == "5":
                print("Thank you for using the Library Management System. Goodbye!")
                break
            else:
                print("Invalid choice. Please enter a number between 1 and 5.")

    def book_operations_menu(self):
        print("\nBook Operations:")
        print("1. Add a new book")
        print("2. Borrow a book")
        print("3. Return a book")
        print("4. Search for a book")
        print("5. Display all books")
        print("6. Back to main menu")

        choice = input("Enter your choice: ")
        if choice == "1":
            self.add_new_book()
        elif choice == "2":
            self.borrow_book()
        elif choice == "3":
            self.return_book()
        elif choice == "4":
            self.search_book()
        elif choice == "5":
            self.display_all_books()
        elif choice == "6":
            return
        else:
            print("Invalid choice. Please enter a number between 1 and 6.")

    def user_operations_menu(self):
        print("\nUser Operations:")
        print("1. Add a new user")
        print("2. View user details")
        print("3. Display all users")
        print("4. Back to main menu")

        choice = input("Enter your choice: ")
        if choice == "1":
            self.add_new_user()
        elif choice == "2":
            self.view_user_details()
        elif choice == "3":
            self.display_all_users()
        elif choice == "4":
            return
        else:
            print("Invalid choice. Please enter a number between 1 and 4.")

    def author_operations_menu(self):
        print("\nAuthor Operations:")
        print("1. Add a new author")
        print("2. View author details")
        print("3. Display all authors")
        print("4. Back to main menu")

        choice = input("Enter your choice: ")
        if choice == "1":
            self.add_new_author()
        elif choice == "2":
            self.view_author_details()
        elif choice == "3":
            self.display_all_authors()
        elif choice == "4":
            return
        else:
            print("Invalid choice. Please enter a number between 1 and 4.")

    def genre_operations_menu(self):
        print("\nGenre Operations:")
        print("1. Add a new genre")
        print("2. View genre details")
        print("3. Display all genres")
        print("4. Back to main menu")

        choice = input("Enter your choice: ")
        if choice == "1":
            self.add_new_genre()
        elif choice == "2":
            self.view_genre_details()
        elif choice == "3":
            self.display_all_genres()
        elif choice == "4":
            return
        else:
            print("Invalid choice. Please enter a number between 1 and 4.")

    def add_new_book(self):
        title = input("Enter the title of the book: ")
        author = input("Enter the author of the book: ")
        isbn = input("Enter the ISBN of the book: ")
        genre = input("Enter the genre of the book: ")
        publication_date = input("Enter the publication date of the book: ")

        cursor = connection.cursor()
        add_book_query = """
        INSERT INTO books (title, author, isbn, genre, publication_date, available)
        VALUES (%s, %s, %s, %s, %s, %s)
        """
        book_data = (title, author, isbn, genre, publication_date, True)
        cursor.execute(add_book_query, book_data)
        connection.commit()
        cursor.close()

        print("Book added successfully.")

    def borrow_book(self):
        title = input("Enter the title of the book to borrow: ")
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM books WHERE title = %s", (title,))
        book = cursor.fetchone()

        if book:
            if book[6]:  # Index 6 corresponds to the 'available' field
                cursor.execute("UPDATE books SET available = FALSE WHERE title = %s", (title,))
                connection.commit()
                print("Book borrowed successfully.")
            else:
                print("Sorry, the book is not available.")
        else:
            print("Book not found.")

        cursor.close()

    def return_book(self):
        title = input("Enter the title of the book to return: ")
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM books WHERE title = %s", (title,))
        book = cursor.fetchone()

        if book:
            if not book[6]:  # Index 6 corresponds to the 'available' field
                cursor.execute("UPDATE books SET available = TRUE WHERE title = %s", (title,))
                connection.commit()
                print("Book returned successfully.")
            else:
                print("The book is already available.")
        else:
            print("Book not found.")

        cursor.close()

    def search_book(self):
        keyword = input("Enter the title or ISBN of the book to search: ")
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM books WHERE title LIKE %s OR isbn = %s", (f"%{keyword}%", keyword))
        books = cursor.fetchall()

        if books:
            for book in books:
                print(f"{book[1]} by {book[2]}")
        else:
            print("Book not found.")

        cursor.close()

    def display_all_books(self):
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM books")
        books = cursor.fetchall()

        if books:
            print("\nAll Books:")
            for book in books:
                print(f"{book[1]} by {book[2]}")
        else:
            print("No books found.")

        cursor.close()

    def add_new_user(self):
        name = input("Enter the name of the user: ")
        library_id = input("Enter the library ID of the user: ")

        cursor = connection.cursor()
        add_user_query = """
        INSERT INTO users (name, library_id)
        VALUES (%s, %s)
        """
        user_data = (name, library_id)
        cursor.execute(add_user_query, user_data)
        connection.commit()
        cursor.close()

        print("User added successfully.")

       def view_user_details(self):
        name = input("Enter the name of the user to view details: ")
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM users WHERE name = %s", (name,))
        user = cursor.fetchone()

        if user:
            print(f"Name: {user[1]}")
            print(f"Library ID: {user[2]}")
            print("Borrowed Books:")
            for book in self.books:
                print(book)  # Assuming self.books is a list of Book objects associated with the user
        else:
            print("User not found.")

        cursor.close()

